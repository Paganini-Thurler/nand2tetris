// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:

    //zx
    //We implemented in hardware the 2's
    Not16(in=x, out= negateX);
    Inc16(in=negateX , out=xComplement);
    Add16(a =x, b=xComplement , out = xZero );
    Mux16(a=x , b=xZero , sel=zx , out=zeroX );
    //nx
    Not16(in=zeroX , out=notx);
    Mux16(a=x , b= notx , sel=nx , out=notX );
    //zy
    Not16(in=y, out= negateY);
    Inc16(in=negateY , out=yComplement);
    Add16(a =y, b=yComplement , out = yZero );
    Mux16(a=y , b=yZero , sel=zy , out=zeroY );
    //ny
    Not16(in=zeroY , out=noty);
    Mux16(a=y , b= noty , sel=ny , out=notY);
    //x+y x.y
    Add16(a=notX, b=notY ,out=xOrB);
    And16(a=notX, b=notY, out=xAndB);
    Mux16(a= xAndB, b=xOrB, sel=f, out=xAndOry);
    //no
    Not16(in=xAndOry , out= notxAndOry);
    Mux16(a=xAndOry , b=notxAndOry , sel=no , out=out, out[15]=negative, out[0..7]=low8,out[8..15]=high8);
    
    //Flags
    //zr
    Or8Way(in=low8, out=zra );
    Or8Way(in=high8, out=zrb );
    Or(a= zra, b=zra , out=zrc );
    Not(in=zrc , out=zr );
    //ng
    And(a=negative, b=true , out=ng);

}